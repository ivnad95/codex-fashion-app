name: Auto Fix Issues and Merge to Main

on:
  push:
    branches-ignore:
      - main
  pull_request:
    types: [opened, synchronize]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Specific branch to fix (leave empty for all branches)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

jobs:
  detect-and-fix-issues:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: ${{ fromJson(needs.get-branches.outputs.branches) }}
    needs: get-branches
    if: needs.get-branches.outputs.branches != '[]'
    
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          npm ci || npm install
          
      - name: Run initial checks
        id: check-issues
        continue-on-error: true
        run: |
          echo "Running checks on branch ${{ matrix.branch }}..."
          
          # Create issues report
          echo "## Issues Found" > issues-report.md
          echo "" >> issues-report.md
          
          # Run lint
          if ! npm run lint 2>&1 | tee lint-output.txt; then
            echo "### Lint Issues" >> issues-report.md
            echo '```' >> issues-report.md
            cat lint-output.txt >> issues-report.md
            echo '```' >> issues-report.md
            echo "" >> issues-report.md
          fi
          
          # Run typecheck
          if ! npm run typecheck 2>&1 | tee typecheck-output.txt; then
            echo "### Type Issues" >> issues-report.md
            echo '```' >> issues-report.md
            cat typecheck-output.txt >> issues-report.md
            echo '```' >> issues-report.md
            echo "" >> issues-report.md
          fi
          
          # Run tests
          if ! npm test 2>&1 | tee test-output.txt; then
            echo "### Test Failures" >> issues-report.md
            echo '```' >> issues-report.md
            cat test-output.txt >> issues-report.md
            echo '```' >> issues-report.md
            echo "" >> issues-report.md
          fi
          
          # Check if we have any issues
          if [ -s lint-output.txt ] || [ -s typecheck-output.txt ] || [ -s test-output.txt ]; then
            echo "has_issues=true" >> $GITHUB_OUTPUT
            echo "Issues detected - will request fixes"
          else
            echo "has_issues=false" >> $GITHUB_OUTPUT
            echo "No issues found!"
          fi
          
      - name: Create issue for Claude/Codex to fix
        if: steps.check-issues.outputs.has_issues == 'true'
        id: create-issue
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Create an issue with the problems for the GitHub Apps to fix
          issue_url=$(gh issue create \
            --title "🤖 Auto-fix: Issues in branch ${{ matrix.branch }}" \
            --body "$(cat issues-report.md)
          
          ## Branch: \`${{ matrix.branch }}\`
          
          Please fix all the issues listed above. The branch needs:
          - All lint issues resolved
          - All type checking issues resolved
          - All tests passing
          
          @claude-ai please fix these issues
          @codex-ai please assist with fixes
          
          This issue was automatically generated for AI fixing." \
            --label "auto-fix" \
            --label "claude" \
            --label "codex")
          
          issue_number=${issue_url##*/}
          echo "issue_number=$issue_number" >> $GITHUB_OUTPUT
          echo "Created issue #$issue_number for AI fixing"
          
      - name: Assign Claude to issue
        if: steps.check-issues.outputs.has_issues == 'true'
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Use GitHub's Copilot/Claude assignment if available
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            "/repos/${{ github.repository }}/issues/${{ steps.create-issue.outputs.issue_number }}/assignees" \
            -f assignees='["claude[bot]"]' || true
          
      - name: Wait for AI fixes
        if: steps.check-issues.outputs.has_issues == 'true'
        timeout-minutes: 10
        run: |
          echo "Waiting for AI to fix issues..."
          
          # Poll for fixes (check every 30 seconds for up to 10 minutes)
          for i in {1..20}; do
            sleep 30
            
            # Pull latest changes
            git pull origin ${{ matrix.branch }} || true
            
            # Check if issues are fixed
            if npm run lint && npm run typecheck && npm test; then
              echo "Issues fixed!"
              break
            fi
            
            echo "Waiting for fixes... ($i/20)"
          done
          
      - name: Verify all fixes
        id: verify-fixes
        run: |
          echo "Verifying fixes..."
          
          all_good=true
          npm run lint || all_good=false
          npm run typecheck || all_good=false
          npm test || all_good=false
          
          if [ "$all_good" = true ]; then
            echo "fixes_successful=true" >> $GITHUB_OUTPUT
            echo "✅ All issues fixed!"
          else
            echo "fixes_successful=false" >> $GITHUB_OUTPUT
            echo "⚠️ Some issues remain"
          fi
          
      - name: Close fix issue
        if: steps.check-issues.outputs.has_issues == 'true' && steps.verify-fixes.outputs.fixes_successful == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh issue close ${{ steps.create-issue.outputs.issue_number }} \
            --comment "✅ All issues have been fixed. Branch is ready to merge."
          
      - name: Create PR to main
        if: steps.verify-fixes.outputs.fixes_successful == 'true' || steps.check-issues.outputs.has_issues == 'false'
        id: create-pr
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Check for existing PR
          existing_pr=$(gh pr list --base main --head ${{ matrix.branch }} --json number --jq '.[0].number' || echo "")
          
          if [ -z "$existing_pr" ]; then
            pr_url=$(gh pr create \
              --base main \
              --head ${{ matrix.branch }} \
              --title "🔄 Auto-merge: ${{ matrix.branch }} → main" \
              --body "## Automated PR
          
          Branch \`${{ matrix.branch }}\` is ready to merge into \`main\`.
          
          ### ✅ All checks passed:
          - Lint: ✅
          - Type checking: ✅
          - Tests: ✅
          
          ### 🤖 Automated by:
          - Claude GitHub App
          - Codex GitHub App
          
          This PR will be automatically merged once all CI checks pass." \
              --label "auto-merge" \
              --label "automated")
            
            echo "pr_number=${pr_url##*/}" >> $GITHUB_OUTPUT
            echo "Created PR #${pr_url##*/}"
          else
            echo "PR #$existing_pr already exists"
            echo "pr_number=$existing_pr" >> $GITHUB_OUTPUT
          fi

  get-branches:
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.get-branches.outputs.branches }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get all branches
        id: get-branches
        run: |
          if [ -n "${{ github.event.inputs.branch }}" ]; then
            branches='["${{ github.event.inputs.branch }}"]'
          else
            # Get all branches except main
            branches=$(git branch -r | grep -v 'HEAD\|main' | sed 's/origin\///' | jq -R -s -c 'split("\n")[:-1]')
          fi
          echo "branches=$branches" >> $GITHUB_OUTPUT
          echo "Processing branches: $branches"

  merge-and-cleanup:
    needs: detect-and-fix-issues
    runs-on: ubuntu-latest
    if: always() && needs.detect-and-fix-issues.result == 'success'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Auto-merge PRs
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Checking PRs ready to merge..."
          
          # Get PRs with auto-merge label
          gh pr list --base main --label "auto-merge" --json number,headRefName,mergeable,mergeStateStatus | \
          jq -r '.[] | select(.mergeable == "MERGEABLE" and .mergeStateStatus == "CLEAN") | .number' | \
          while read pr_number; do
            if [ -n "$pr_number" ]; then
              echo "Merging PR #$pr_number..."
              gh pr merge $pr_number --squash --delete-branch
              echo "✅ Merged and deleted branch"
            fi
          done
          
      - name: Clean up merged branches
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Cleaning up merged branches..."
          
          git fetch --all --prune
          
          # Delete branches that have been merged
          for branch in $(git branch -r --merged origin/main | grep -v 'HEAD\|main' | sed 's/origin\///'); do
            echo "Deleting merged branch: $branch"
            git push origin --delete $branch || echo "Could not delete $branch"
          done
          
      - name: Report stale branches
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Check for stale branches (>30 days old)
          for branch in $(git branch -r | grep -v 'HEAD\|main' | sed 's/origin\///'); do
            last_commit=$(git log -1 --format=%ct origin/$branch 2>/dev/null || echo 0)
            current_time=$(date +%s)
            days_old=$(( (current_time - last_commit) / 86400 ))
            
            if [ $days_old -gt 30 ]; then
              gh issue create \
                --title "⏰ Stale branch: $branch" \
                --body "Branch \`$branch\` hasn't been updated in $days_old days.
                
                Please review and either:
                - Merge to main
                - Delete if no longer needed
                - Update if still in progress
                
                This branch will be automatically deleted in 7 days if no action is taken." \
                --label "stale-branch" || true
            fi
          done
          
      - name: Summary
        if: always()
        run: |
          echo "## 📊 Automation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Active branches:" >> $GITHUB_STEP_SUMMARY
          git branch -r | grep -v 'HEAD' | sed 's/origin\//- /' >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recent merges:" >> $GITHUB_STEP_SUMMARY
          gh pr list --state merged --limit 5 --json number,title,mergedAt --jq '.[] | "- #\(.number): \(.title) (merged \(.mergedAt))"' >> $GITHUB_STEP_SUMMARY || echo "No recent merges" >> $GITHUB_STEP_SUMMARY