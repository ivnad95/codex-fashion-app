name: Auto-Fix with GitHub Codex

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - '**'
      - '!main'
  workflow_dispatch:

jobs:
  auto-fix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      checks: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          if [ -f "package-lock.json" ]; then
            npm ci
          elif [ -f "package.json" ]; then
            npm install
          fi
          
      - name: Detect issues
        id: detect
        continue-on-error: true
        run: |
          echo "Detecting issues in the codebase..."
          
          # Initialize issue flags
          HAS_CONFLICTS=false
          HAS_LINT_ERRORS=false
          HAS_TYPE_ERRORS=false
          HAS_TEST_FAILURES=false
          
          # Check for merge conflicts
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            git fetch origin ${{ github.base_ref }}
            if ! git merge-base --is-ancestor origin/${{ github.base_ref }} HEAD; then
              echo "Checking for conflicts..."
              git merge origin/${{ github.base_ref }} --no-commit --no-ff || HAS_CONFLICTS=true
              git merge --abort 2>/dev/null || true
            fi
          fi
          
          # Check for linting errors
          if [ -f "package.json" ] && grep -q "\"lint\"" package.json; then
            npm run lint 2>&1 | tee lint_output.txt || HAS_LINT_ERRORS=true
          fi
          
          # Check for type errors
          if [ -f "tsconfig.json" ]; then
            npx tsc --noEmit 2>&1 | tee type_output.txt || HAS_TYPE_ERRORS=true
          fi
          
          # Check for test failures
          if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
            npm test -- --passWithNoTests 2>&1 | tee test_output.txt || HAS_TEST_FAILURES=true
          fi
          
          # Set outputs
          echo "has_conflicts=$HAS_CONFLICTS" >> $GITHUB_OUTPUT
          echo "has_lint_errors=$HAS_LINT_ERRORS" >> $GITHUB_OUTPUT
          echo "has_type_errors=$HAS_TYPE_ERRORS" >> $GITHUB_OUTPUT
          echo "has_test_failures=$HAS_TEST_FAILURES" >> $GITHUB_OUTPUT
          
          # Create issue summary
          if [ "$HAS_CONFLICTS" = true ] || [ "$HAS_LINT_ERRORS" = true ] || [ "$HAS_TYPE_ERRORS" = true ] || [ "$HAS_TEST_FAILURES" = true ]; then
            echo "issues_found=true" >> $GITHUB_OUTPUT
            
            # Prepare issue description for Codex
            ISSUE_DESC="The following issues were detected:\n"
            [ "$HAS_CONFLICTS" = true ] && ISSUE_DESC="$ISSUE_DESC- Merge conflicts\n"
            [ "$HAS_LINT_ERRORS" = true ] && ISSUE_DESC="$ISSUE_DESC- Linting errors\n"
            [ "$HAS_TYPE_ERRORS" = true ] && ISSUE_DESC="$ISSUE_DESC- TypeScript errors\n"
            [ "$HAS_TEST_FAILURES" = true ] && ISSUE_DESC="$ISSUE_DESC- Test failures\n"
            
            echo "$ISSUE_DESC" > issues_summary.txt
          else
            echo "issues_found=false" >> $GITHUB_OUTPUT
            echo "No issues detected" > issues_summary.txt
          fi
          
      - name: Trigger Codex Auto-Fix
        if: steps.detect.outputs.issues_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const issuesSummary = fs.readFileSync('issues_summary.txt', 'utf8');
            
            // Create an issue to trigger Codex
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[Codex Auto-Fix] Fix detected issues in ${context.sha.substring(0, 7)}`,
              body: `@codex please fix the following issues automatically:\n\n${issuesSummary}\n\nBranch: ${context.ref}\nCommit: ${context.sha}\n\nPlease apply fixes directly to the branch.`,
              labels: ['codex-auto-fix', 'automated']
            });
            
            console.log(`Created issue #${issue.data.number} for Codex to process`);
            
            // Wait for Codex to process (polling)
            let attempts = 0;
            const maxAttempts = 30; // 5 minutes timeout
            
            while (attempts < maxAttempts) {
              await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds
              
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.data.number
              });
              
              // Check if Codex has responded
              const codexComment = comments.data.find(c => 
                c.user.login.includes('codex') || 
                c.user.type === 'Bot'
              );
              
              if (codexComment) {
                console.log('Codex has processed the request');
                
                // Close the issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.data.number,
                  state: 'closed'
                });
                
                break;
              }
              
              attempts++;
            }
            
            if (attempts >= maxAttempts) {
              console.log('Codex processing timeout - manual review may be required');
            }
            
      - name: Verify fixes
        if: steps.detect.outputs.issues_found == 'true'
        run: |
          # Pull latest changes that Codex might have pushed
          git pull origin ${{ github.ref_name }} || true
          
          # Re-run checks to verify fixes
          echo "Verifying fixes..."
          
          STILL_HAS_ISSUES=false
          
          if [ -f "package.json" ] && grep -q "\"lint\"" package.json; then
            npm run lint || STILL_HAS_ISSUES=true
          fi
          
          if [ -f "tsconfig.json" ]; then
            npx tsc --noEmit || STILL_HAS_ISSUES=true
          fi
          
          if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
            npm test -- --passWithNoTests || STILL_HAS_ISSUES=true
          fi
          
          if [ "$STILL_HAS_ISSUES" = true ]; then
            echo "‚ö†Ô∏è Some issues could not be automatically fixed"
            exit 1
          else
            echo "‚úÖ All issues have been fixed successfully"
          fi
          
      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.detect.outputs.issues_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issuesSummary = require('fs').readFileSync('issues_summary.txt', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ü§ñ **GitHub Codex Auto-Fix**\n\n${issuesSummary}\n\nCodex has been triggered to automatically fix these issues. Please wait for the fixes to be applied.`
            });

  monitor-branches:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    
    steps:
      - name: Setup branch protection
        uses: actions/github-script@v7
        with:
          script: |
            // Monitor branch health
            console.log(`Monitoring branch: ${context.ref}`);
            
            // This job ensures Codex runs on every non-main branch push